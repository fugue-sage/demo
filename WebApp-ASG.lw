composition

import Fugue.AWS as AWS
import Fugue.AWS.Pattern.Network as Network
import Fugue.AWS.EC2 as EC2
import Fugue.AWS.ELB as ELB
import Fugue.AWS.RDS as RDS
import Fugue.AWS.AutoScaling as AutoScaling
import Fugue.AWS.IAM as IAM
import Fugue.Core.Vars as Vars

# Change these values to be specific to your account:
web-app-ec2-key-name: "CHANGEME"

web-app-tag: AWS.tag("Application", "WebApp")

web-app-region: AWS.Us-west-2
web-app-ami: "ami-e9f85989"
api-ami: "ami-09f95869"

web-app-network: Network.public {
  name: "WebApp Network",
  region: web-app-region,
  cidr: "10.0.0.0/16",
  subnets: [
    (AWS.A, "10.0.1.0/24"),
    (AWS.B, "10.0.2.0/24"),
  ]
}

# ELB Security Group
web-app-elb-sg: EC2.SecurityGroup.new {
  description: "WebApp loadbalancer",
  ipPermissions: [
    EC2.IpPermission.http(EC2.IpPermission.Target.all),
    EC2.IpPermission.https(EC2.IpPermission.Target.all),
  ],
  tags: [web-app-tag],
  vpc: web-app-network.vpc
}

# EC2 Security Group
web-app-ec2-sg: EC2.SecurityGroup.new {
  description: "Allow http traffic from the ELB",
  ipPermissions: [
    EC2.IpPermission.http(EC2.IpPermission.Target.securityGroup(web-app-elb-sg)),
    EC2.IpPermission.ssh(EC2.IpPermission.Target.all),
  ],
  tags: [web-app-tag],
  vpc: web-app-network.vpc
}

# Web App ELB
web-app-web-app-elb: ELB.LoadBalancer.new {
  loadBalancerName: "web-app-web-app",
  healthCheck: web-app-elb-health-check,
  subnets: web-app-network.publicSubnets,
  securityGroups: [web-app-elb-sg],
  listeners: [web-app-http-listener],
  tags: [web-app-tag]
}

# API ELB
web-app-api-elb: ELB.LoadBalancer.new {
  loadBalancerName: "web-app-api",
  healthCheck: web-app-elb-health-check,
  subnets: web-app-network.publicSubnets,
  securityGroups: [web-app-elb-sg],
  listeners: [web-app-http-listener],
  tags: [web-app-tag]
}

# ELB health check
web-app-elb-health-check: ELB.HealthCheck.tcp {
  interval: 30,
  timeout: 5,
  unhealthyThreshold: 3,
  healthyThreshold: 2,
  port: 80
}

# ELB HTTP listener
web-app-http-listener: ELB.Listener.new {
  protocol: ELB.HTTP,
  loadBalancerPort: 80,
  instancePort: 80
}

# ASGs
web-app-web-app-asg: AutoScaling.AutoScalingGroup.new(
  AutoScaling.AutoScalingGroup.default with {
    subnets: web-app-network.publicSubnets,
    loadBalancers: [web-app-web-app-elb],
    minSize: 2,
    maxSize: 2,
    launchConfiguration: web-app-web-app-lc,
    tags: [web-app-tag],
    terminationPolicies: [AutoScaling.ClosestToNextInstanceHour],
    enabledMetrics: [
      AutoScaling.GroupInServiceInstances,
      AutoScaling.GroupTotalInstances
    ]
})

web-app-api-asg: AutoScaling.AutoScalingGroup.new(
  AutoScaling.AutoScalingGroup.default with {
    subnets: web-app-network.publicSubnets,
    loadBalancers: [web-app-api-elb],
    minSize: 2,
    maxSize: 2,
    launchConfiguration: web-app-api-lc,
    tags: [web-app-tag],
    terminationPolicies: [AutoScaling.ClosestToNextInstanceHour],
    enabledMetrics: [
      AutoScaling.GroupInServiceInstances,
      AutoScaling.GroupTotalInstances
    ]
})

# ASG launch configs
web-app-web-app-lc: AutoScaling.LaunchConfiguration.new(
  AutoScaling.LaunchConfiguration.default with {
    image: web-app-ami,
    securityGroups: [web-app-ec2-sg],
    instanceType: EC2.T2_micro,
    associatePublicIpAddress: True,
    iamInstanceProfile: web-app-ec2-profile,
    keyName: web-app-ec2-key-name
})

web-app-api-lc: AutoScaling.LaunchConfiguration.new(
  AutoScaling.LaunchConfiguration.default with {
    image: api-ami,
    securityGroups: [web-app-ec2-sg],
    instanceType: EC2.T2_micro,
    associatePublicIpAddress: True,
    iamInstanceProfile: web-app-ec2-profile,
    keyName: web-app-ec2-key-name,
    userData: "export RDS_USERNAME=admin
     \export RDS_PASSWORD=!password1
     \export RDS_DB_NAME=api"
})

# EC2 instance IAM role
web-app-role: IAM.Role.new {
  roleName: 'web-app-role',
  assumeRolePolicyDocument: IAM.Policy.AssumeRole.ec2,
  rolePolicies: [web-app-role-policy]
}

web-app-ec2-profile: IAM.InstanceProfile.new {
  instanceProfileName: 'web-app-ec2-profile',
  roles: [web-app-role]
}

web-app-role-policy: IAM.Policy.new {
  policyName: 'elb-describe',
  policyDocument: '
{
  "Version": "2012-10-17",
  "Statement": [{
    "Effect": "Allow",
    "Action": [],
    "Resource": ["*"]
  }]
}
'
}

# RDS Security Group
web-app-rds-sg: EC2.SecurityGroup.new {
  description: "Allow MySQL traffic from the Internet",
  ipPermissions: [
    EC2.IpPermission.mysql(EC2.IpPermission.Target.securityGroup(web-app-ec2-sg))
  ],
  ipPermissionsEgress: None,
  tags: [web-app-tag],
  vpc: web-app-network.vpc
}

# RDS instance
web-app-db-subnet-group: RDS.DBSubnetGroup.new {
  name: "web-app-db",
  description: "WebApp subnet group",
  subnets: web-app-network.publicSubnets,
  tags: [web-app-tag]
}

web-app-db-instance: RDS.DBInstance.new {
  dbInstanceIdentifier: "WebApp",
  dbInstanceClass: RDS.DB_T2_MICRO,
  engine: RDS.MySQL,
  masterUsername: "admin",
  dbName: "api",
  allocatedStorage: 1000,
  securityGroups: [web-app-rds-sg],
  dbSubnetGroup: web-app-db-subnet-group,
  multiAZ: True,
  storageType: EC2.Standard,
  masterUserPassword: Vars.PlainText({password: "!password1"}),
  tags: [web-app-tag]
}
