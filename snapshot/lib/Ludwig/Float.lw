@language("no-prelude")

import Ludwig.Error as .

fun add(x: Float, y: Float) -> Float: __Ludwig_Float_add(x, y)
fun sub(x: Float, y: Float) -> Float: __Ludwig_Float_sub(x, y)
fun mul(x: Float, y: Float) -> Float: __Ludwig_Float_mul(x, y)

fun div(x: Float, y: Float) -> Float:
  if __Ludwig_Float_eq(y, 0.0) then
    error("Ludwig.Float.div: Divide by zero")
  else
    __Ludwig_Float_div(x, y)

fun pow(x: Float, y: Float) -> Float:
  if __Ludwig_Float_lt(y, 0.0) then
    error("Ludwig.Float.pow: Negative exponent")
  else
    __Ludwig_Float_pow(x, y)

# Negate an `Float`.
#
# Note that this is currently the only way to specify a negative literal.
#
# Example:
#
#     negative1: negate(1)           # => -1
#     positive1: negate(negative1)   # => 1
fun negate(x: Float) -> Float: __Ludwig_Float_negate(x)

# Addition operator for `Float`s.
operator +. infixl 6: add

# Subtraction operator for `Float`s.
operator -. infixl 6: sub

# Multiplication operator for `Float`s.
operator *. infixl 7: mul

# Division operator for `Float`s.
operator /. infixl 7: div

# Exponent operator for `Float`s.
operator ^. infixr 8: pow

fun eq(x: Float, y: Float)  -> Bool:  __Ludwig_Float_eq(x, y)
fun neq(x: Float, y: Float) -> Bool: __Ludwig_Float_neq(x, y)
fun lt(x: Float, y: Float)  -> Bool:  __Ludwig_Float_lt(x, y)
fun lte(x: Float, y: Float) -> Bool: __Ludwig_Float_lte(x, y)
fun gt(x: Float, y: Float)  -> Bool:  __Ludwig_Float_gt(x, y)
fun gte(x: Float, y: Float) -> Bool: __Ludwig_Float_gte(x, y)

# Equality operator for `Float`s.
operator ==. infixl 4: eq

# Inequality operator for `Float`s.
operator !=. infixl 4: neq

# Less than operator for `Float`s.
operator <.  infixl 4: lt

# Less than or equal operator for `Float`s.
operator <=. infixl 4: lte

# Greater than operator for `Float`s.
operator >.  infixl 4: gt

# Greater than or equal operator for `Float`s.
operator >=. infixl 4: gte

# `Int` to `Float` conversion
fun intToFloat(x: Int) -> Float: __Ludwig_Float_intToFloat(x)

# `Float` to `Int` conversion. See also `ceiling`.
fun floor(x: Float) -> Int: __Ludwig_Float_floor(x)

# `Float` to `Int` conversion. See also `floor`.
fun ceiling(x: Float) -> Int: __Ludwig_Float_ceiling(x)

# `Float` to `Int` conversion by rounding.
fun round(x: Float) -> Int: __Ludwig_Float_round(x)
