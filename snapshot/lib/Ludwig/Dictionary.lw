@language("no-prelude")

import Ludwig.List as List

export
    # Queries
    size
    isEmpty
    null

    # Constructing dictionaries
    empty
    insert
    merge

    # Queries
    lookup
    member

    # Modification
    delete

    # Conversion to and from lists
    keys
    values
    toList
    fromList

    # Higher order functions
    map
    filter
    reduce

# Get the number of key-value pairs in a Dictionary.
#
# Example:
#
#     num-elems: Dictionary.size({"foo": 1, "bar": 2})  # => 2
fun size(dict: Dictionary<a>) -> Int: __Ludwig_Dictionary_size(dict)

# Test if a Dictionary is empty.
#
# Example:
#
#     this-is-empty: Dictionary.isEmpty(Dictionary.empty)   # => True
#     this-is-not-empty: Dictionary.isEmpty({"foo": "bar"}) # => False
fun isEmpty(dict: Dictionary<a>) -> Bool: __Ludwig_Dictionary_isEmpty(dict)

# *DEPRECATED*: Use `isEmpty` instead.
#
# Test if a Dictionary is empty.
#
# Example:
#
#     this-is-empty: Dictionary.null(Dictionary.empty)   # => True
#     this-is-not-empty: Dictionary.null({"foo": "bar"}) # => False
fun null(dict: Dictionary<a>) -> Bool:
  # @deprecated("Use `isEmpty` instead.")
  isEmpty(dict)

# The empty Dictionary.
#
# Example:
#
#     my-dict: empty   # => {}
empty: __Ludwig_Dictionary_empty

# Insert a key, value pair into a Dictionary.
#
# Return a new Dictionary constructed from the original Dictionary
# with the new item inserted. Any existing values associated with the
# key are replaced.
#
# Example:
#
#     my-dict: Dictionary.insert("hello", "world", empty)   # => {"hello": "world"}
#
# @arg key The key to insert.
# @arg value The value to insert.
# @arg dict The Dictionary to insert `key` and `value` to.
# @return A new Dictionary constructed from `dict` with `key` and
# `value` inserted.
fun insert(key: String, value: a, dict: Dictionary<a>) -> Dictionary<a>:
  __Ludwig_Dictionary_insert(key, value, dict)

# Merge two dictionaries, creating a new dictionary that holds the union of the
# key-value pairs.
#
# Example:
#
#     dict01: Dictionary.merge({"foo": 1}, {"bar": 2})   # => {"foo": 1, "bar": 2}
#
# If there are collisions between keys, the corresponding values in the **left**
# dictionary win, and the corresponding values in the **right** argument are
# thrown away.
#
# Example:
#
#     dict02: Dictionary.merge({"foo": 1}, {"foo": 2})   # => {"foo": 1}
fun merge(left: Dictionary<a>, right: Dictionary<a>) -> Dictionary<a>:
  __Ludwig_Dictionary_merge(left, right)

# Lookup a key in the Dictionary and return it wrapped in `Optional`
# if it exists. Returns `None` if the `Dictionary` does not contain
# the specified key.
#
# Example:
#
#     my-dictionary: {"foo": "bar", "baz": "quux"}
#     my-foo: Dictionary.lookup("foo", my-dictionary)         # => Optional("bar")
#     my-bar: Dictionary.lookup("bar", my-dictionary)         # => None
#
# @arg key The key to lookup.
# @arg dict The Dictionary to lookup `key` in.
# @return The value corresponding to `key` wrapped in `Optional<a>` if
# it exists. Returns `None` if `dict` does not contain `key`.
fun lookup (key: String, dict: Dictionary<a>) -> Optional<a>:
  __Ludwig_Dictionary_lookup(key, dict)

# Test if a Dictionary contains a given key.
#
# Example:
#
#     my-dictionary: {"foo": "bar", "baz": "quux"}
#     has-foo: Dictionary.member("foo", my-dictionary)         # => True
#     has-bar: Dictionary.member("bar", my-dictionary)         # => False
#
# @arg key The key to look for.
# @arg dict The dictionary to search.
# @return `True` if the `dict` contains `key`.
fun member(key: String, dict: Dictionary<a>) -> Bool:
  __Ludwig_Dictionary_member(key, dict)

# Create a new Dictionary without the given key.  If the key is not present in
# the Dictionary, the original Dictionary will be returned.
#
# Example:
#
#     my-dict: {"foo": 1, "bar": 2}
#     my-new-dict: Dictionary.delete("foo", my-dictionary)  # => {"bar", 2}
fun delete(key: String, dict: Dictionary<a>) -> Dictionary<a>:
  __Ludwig_Dictionary_delete(key, dict)

# Get the List of keys in a Dictionary.
#
# Example:
#
#     my-dictionary: {"foo": 1, "bar": 2}
#     my-keys: Dictionary.keys(my-dictionary)           # => ["foo", "bar"]
#
# @arg dict The Dictionary to return the keys from.
# @return A `List<String>` of the keys in the `dict` in no
# particular order.
fun keys(dict: Dictionary<a>) -> List<String>: __Ludwig_Dictionary_keys(dict)

# Return a `List<a>` of the values in the `Dictionary` in no particular
# order.
#
# Example:
#
#     my-dictionary: {"foo": "bar", "baz": "quux"}
#     my-values: Dictionary.values(my-dictionary)              # => ["bar", "quux"]
#
# @arg dict The Dictionary to return the keys from.
# @return A List of the values in the `dict` in no particular
# order.
fun values(dict: Dictionary<a>) -> List<a>:
  __Ludwig_Dictionary_values(dict)

# Convert a dictionary to a list.  The returned list has no particular order.
#
# Example:
#
#     my-list: Dictionary.toList({"foo": 1, "bar", 2})  # => [("foo", 1), ("bar", 2)]
fun toList(dict: Dictionary<a>) -> List<(String, a)>:
  __Ludwig_Dictionary_toList(dict)

# Create a dictionary from a list of key, value pairs.
#
# Example:
#
#     my-list: Dictionary.fromList([("foo", 1), ("bar", 2)])  # => {"foo": 1, "bar": 2}
fun fromList(list: List<(String, a)>) -> Dictionary<a>:
  case __Ludwig_List_uncons(list) of
    | None                  -> __Ludwig_Dictionary_empty
    | Optional ((k, v), xs) -> __Ludwig_Dictionary_insert(k, v, fromList(xs))

# Map over the elements in a dictionary.
fun map(f: fun(String, a) -> b, dict: Dictionary<a>) -> Dictionary<b>:
  fromList([(k, f(k, v)) for (k, v) in toList(dict)])

# Reduce a `Dictionary` by applying the operation.  The dictionary will be
# reduced in no particular order.
fun reduce(f: fun(b, String, a) -> b, z: b, dict: Dictionary<a>) -> b:
  List.reduce(fun (acc, kv): case kv of (k, v) -> f(acc, k, v), z, toList(dict))

# Returns a new `Dictionary` by keeping only the key, value pairs that satisfy
# the given predicate.
fun filter(f: fun(String, a) -> Bool, dict: Dictionary<a>) -> Dictionary<a>:
  fromList([(k, v) for (k, v) in toList(dict) if f(k, v)])
