# This module provides the basic system types for Fugue's RBAC system,
# as well as convenience functions and values to make writing RBAC
# policies even easier.
#
# RBAC policy answers questions concerning authorization like,
# "how does Fugue know who I'm talking to?" or "how do I prove who I am?"
# For example, if Alice issues `fugue run`,
# how does the Fugue Conductor know that it's really Alice and not Bob?
# Included in this policy are rules that help answer questions like
# "what is a user allowed to do?"
#
# Some helpful terms and definitions with regards to RBAC policy include:
# A principal is a user, group, or role. It's the "who"
# An action is an operation that a principal can perform
# A subject is the target of an action. It's the direct object of the action
# A rule binds a principal, an action, and a subject together
# A policy is a collection of rules
#
# A simple example of a Fugue RBAC Policy looks like this:
#
#     # Alice can manage the account table.
#     aliceAcctTable: accountTableRules {
#       principals: [alice],
#       actions: allAccountTableActions
#     }
#
#     # Alice and Bob can see what's running and process history in
#     # all accounts, but can't change them.
#     readOnlyAccountRules: accountRules {
#       principals: [
#         alice,
#         bob,
#       ],
#       accounts: [AllAccounts],
#       actions: [
#         AccountStatusProcess,
#         AccountHistoryProcess,
#       ]
#     }
#
# In this example, Alice is permitted to modify the Conductor's
# account table, and both Bob and Alice are permitted "read only"
# access to all accounts.

############################################
# Functions to easily build lists of rules
############################################

# Given a list of principals and a list of account table actions,
# return a list of rules with the subject set to the AccountTable.
#
# Example:
#
#     # Alice can manage the account table
#     aliceAcctTable: accountTableRules {
#       principals: [alice],
#       actions: allAccountTableActions
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg actions The list of actions each principal will be allowed in
# the generated rules.
# @return A list of rules, where the subject is the AccountTable, and
# the principals and actions are those given in the preceding
# arguments.
fun accountTableRules {
    principals: List<Principal>,
    actions: List<AccountTableAction>
  } -> List<Rule>:
  [ Rule { principal: p, subject: AccountTable, action: AccountTableAction(a) } for (p, a) in List.cartesianProduct(principals, actions) ]

# Given lists of principals, accounts, and account actions, return a
# list of rules.
#
# Example:
#
#     # Alice can manage compositions in an account bound to the name 'fugueAcct'
#     aliceFugueAcct: accountRules {
#       principals: [alice],
#       accounts: [fugueAcct],
#       actions: allAccountActions,
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg accounts The list of accounts to be subjects in the generated rules.
# @arg actions The list of actions to permit for each principal in each account.
# @return A list of rules, where the subjects are the given accounts,
# with each principal allowed each action in each account.
fun accountRules {
    principals: List<Principal>,
    accounts: List<Account>,
    actions: List<AccountAction> } -> List<Rule>:
    List.flatten([ singleAccountRules { principals: principals, account: a, actions: actions } for a in accounts ])

# Given a list of principals, an account, and a list of account actions, return a list of rules.
#
# Example:
#
#     # Alice can manage compositions in an account bound to the name 'fugueAcct'
#     aliceFugueAcct: accountRules {
#       principals: [alice],
#       account: fugueAcct,
#       actions: allAccountActions
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg account The account to make the subject of the generated rules.
# @arg actions The list of actions to permit for each principal in the given account.
# @return A list of rules, where the subject is the given account,
# with each principal allowed each action in the account.
fun singleAccountRules {
    principals: List<Principal>,
    account: Account,
    actions: List<AccountAction> } -> List<Rule>:
    [ Rule {principal: p, subject: AccountType(account), action: AccountAction(a)} for (p, a) in List.cartesianProduct(principals, actions) ]


# Given a list of principals and a list of RBAC actions, return a list
# of rules with the subject set to the RbacMetadata.
#
# Example:
#
#     # Alice can view users in the Conductor RBAC system.
#     aliceFugueAcct: accountRules {
#       principals: [alice],
#       actions: [RbacListUsers]
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg actions The list of actions to permit in the generated rules.
# @return A list of rules, where the subject is the Conductor's RBAC
# rules (RbacMetadata), with each principal allowed the given actions
# against the RbacMetadata subject.
fun rbacRules {
    principals: List<Principal>,
    actions: List<RbacAction> } -> List<Rule>:
    [ Rule {principal: p, subject: RbacMetadata, action: RbacAction(a) } for (p, a) in List.cartesianProduct(principals, actions) ]


# Given a list of principals, a process, and a list of process actions, return a list of rules.
#
# Example:
#
#     # Alice can manage all actions for a dev process.
#     aliceDevProcess: singleProcessRules {
#       principals: [alice],
#       process: devProcess,
#       actions: allProcessActions
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg process The process to make the subject of the generated rules.
# @arg actions The list of actions to permit for each principal in the given process.
# @return A list of rules, where the subject is the given process,
# with each principal allowed each action in the process.
fun singleProcessRules {
    principals: List<Principal>,
    process: Process,
    actions: List<ProcessAction> } -> List<Rule>:
    [ Rule {principal: p, subject: ProcessType(process), action: ProcessAction(a)} for (p, a) in List.cartesianProduct(principals, actions) ]


# Given lists of principals, processes, and process actions, return a
# list of rules.
#
# Example:
#
#     # Alice can manage all actions for dev and test processes.
#     aliceDevTestProcesses: processRules {
#       principals: [alice],
#       processes: [devProcess, testProcess],
#       actions: allProcessActions
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg processes The list of processes to be subjects in the generated rules.
# @arg actions The list of actions to permit for each principal in each process.
# @return A list of rules, where the subjects are the given processes,
# with each principal allowed each action in each process.
fun processRules {
    principals: List<Principal>,
    processes: List<Process>,
    actions: List<ProcessAction> } -> List<Rule>:
    List.flatten([ singleProcessRules { principals: principals, process: p, actions: actions } for p in processes ])


# Given a list of principals and a list of validation table actions,
# return a list of rules with the subject set to the ValidationTable.
#
# Example:
#
#     # Alice can manage the validation table
#     aliceValidationTable: validationTableRules {
#       principals: [alice],
#       actions: allValidationTableActions
#     }
#
# @arg principals The list of principals for the generated rules.
# @arg actions The list of actions each principal will be allowed in
# the generated rules.
# @return A list of rules, where the subject is the ValidationTable, and
# the principals and actions are those given in the preceding
# arguments.
fun validationTableRules {
    principals: List<Principal>,
    actions: List<ValidationTableAction>
  } -> List<Rule>:
  [ Rule {principal: p, subject: ValidationTable, action: ValidationTableAction(a)} for (p, a) in List.cartesianProduct(principals, actions)]  


###############
# Handy values
###############

# This set of actions provides all account actions. It is essentially
# full read/write access to the Conductor process table. This is
# effectively a superuser.
allAccountActions: List.flatten([
  [AccountRunProcess,
  AccountUpdateProcess,
  AccountKillProcess,
  AccountResumeProcess,
  AccountSuspendProcess,
  AccountHistoryProcess,
  AccountStatusProcess,
  AccountReleaseProcess,
  AccountJobProcess],
  allAccountPropertyActions
])

# With this set of actions, a user has full write permissions for all
# properties of all processes in a given account.
allAccountPropertyActions: [
   AccountPropertyProcess,
   AccountProcessSetAlias,
   AccountProcessSetEnforcement
]

# This set of actions provides all account table actions. With this
# set of actions, a user has full read/write access to the table of
# accounts known by the Conductor.
allAccountTableActions: [
  AccountTableAdd,
  AccountTableList,
  AccountTableUpdate,
  AccountTableDelete
  ]

# This set of actions provides all RBAC policy management
# actions. With this set of actions, a user has full read/write access
# to the RBAC policy on the Conductor.
allRbacActions: [
  RbacListUsers,
  RbacAttachPolicy,
  RbacGetPolicy,
  RbacDetachPolicy,
  RbacRotateCredential,
  RbacPolicyStatus
  ]

# This set of actions provides all process actions. With this
# set of actions, a user has full read/update/delete permissions to the set of
# processes the Conductor is managing.
allProcessActions: List.flatten([
  [ProcessUpdate,
  ProcessKill,
  ProcessResume,
  ProcessSuspend,
  ProcessGetHistory,
  ProcessGetStatus,
  ProcessRelease,
  ProcessGetJob],
  allProcessPropertyActions
])

# With this set of actions, a user has full write permissions
# for all properties of a process.
allProcessPropertyActions: [
   ProcessSetAlias,
   ProcessSetEnforcement
]

# This set of actions provides all validation table actions. With this
# set of actions, a user has full read/write access to the table of
# validation libraries known by the Conductor.
allValidationTableActions: [
  ValidationTableCreate,
  ValidationTableGet,
  ValidationTableDelete,
  ValidationTableList,
  ]

####################
# RBAC system types
####################

# A `Principal` is an entity that can be authorized to perform an
# operation. They are one of the three key elements of a rule, the
# other two being an `Action` and a `Subject`.
#
# @constructor User A specific user to identify as a principal. When a
# user is present in a rule, that user is automatically created in the
# Conductor.
#
# @field userId The name of the user being referenced.
#
# @constructor AllUsers A special global principal that affects all users.
type Principal:
  | User
      userId: String
  | AllUsers

# An `Account` is an IaaS provider account known to the
# Conductor. Such accounts are eligible to host Fugue processes.
#
# @constructor Account An account in the Conductor's account table.
#
# @field accountId The account ID _as it is known in the
# Conductor's account table_. This is not the provider account number,
# but instead the Account ID as assigned to the account when you
# registered it with `fugue account add`.
#
# @constructor NamedAccount An account in the account table referred
# to by a name instead of the account ID.
#
# @field accountName The account name as defined by the user when the
# account was added.
#
# @constructor AllAccounts A special global account subject.
type Account:
  | Account
      accountId: String
  | NamedAccount
      accountName: String
  | AllAccounts

  # A `Process` is an instantiation of a composition created and
  # managed by the Conductor.
  #
  # @constructor Process A managed instantiation of a composition.
  #
  # @field fid The Fugue ID of a process.
  #
  # @constructor AllProcesses A special global process subject.
type Process:
  | Process
      fid: String
  | AliasedProcess
      alias: String
  | AllProcesses

# A `Subject` is the target of a rule. It is one of the three key
# elements of a rule, the other two being an `Action` and a
# `Principal`.
#
# @constructor AccountTable The table of accounts in the Conductor
# (visible with `fugue account list`).
#
# @constructor AccountType An `Account` value, either representing a
# single account (`Account` constructor) or all accounts
# (`AllAccounts` constructor).
#
# @constructor RbacMetadata The RBAC policy data on the Conductor.
#
# @constructor AllSubjects A special global subject. Use with caution.
type Subject:
  | AccountTable
  | AccountType Account
  | RbacMetadata
  | ProcessType Process
  | ValidationTable
  | AllSubjects

# A `Rule` is an authorization for a `Principal` to perform an
# `Action` on a `Subject`. It is the keystone type of the Fugue RBAC
# system.
#
# @field principal The `Principal` authorized to perform the `Action` on the `Subject`.
# @field subject The `Subject` to which the rule applies.
# @field action The `Action` which the rule permits.
type Rule:
  | Rule
      principal: Principal
      subject: Subject
      action: Action

# An `Action` is a generic type for an operation that a principal can perform.
#
# @constructor AccountAction A valid action for `Account` subjects.
# @constructor AccountTableAction A valid action for the Conductor's `AccountTable` subject.
# @constructor RbacAction A valid action for the Conductor's RBAC metadata subject.
# @constructor ProcessAction A valid action for a Process being run by the Conductor.
type Action:
  | AccountAction AccountAction
  | AccountTableAction AccountTableAction
  | RbacAction RbacAction
  | ProcessAction ProcessAction
  | ValidationTableAction ValidationTableAction

# Actions that can be performed on an `Account` subject, which is an
# IaaS account registered with the Conductor via `fugue account add`.
#
# @constructor AccountRunProcess Permits a principal to run a process
# in an account (`fugue run`).
# @constructor AccountUpdateProcess Permits a principal to update a
# process in an account (`fugue update`).
# @constructor AccountKillProcess Permits a principal to kill a
# process in an account (`fugue kill`).
# *DEPRECATED* Use AccountProcessSetAlias or AccountProcessSetEnforcement instead.
# @constructor AccountPropertyProcess Permits a principal to read and
# write process properties in an account (`fugue property`).
# @constructor AccountProcessSetAlias Permits a principal to write the
# alias process property for all processes in an account (`fugue property <fid|alias> alias --set <value>`).
# @constructor AccountProcessSetEnforcement Permits a principal to write the
# enforcement property for all processes in an account (`fugue property <fid|alias> enforcement --set <value>`).
# @constructor AccountResumeProcess Permits a principal to resume a
# process in an account (`fugue resume`).
# @constructor AccountSuspendProcess Permits a principal to suspend a
# process in an account (`fugue suspend`).
# @constructor AccountHistoryProcess Permits a principal to examine
# the history of a process in an account (`fugue history`).
# @constructor AccountStatusProcess Permits a principal to examine the
# status of a process in an account (`fugue status`).
# @constructor AccountReleaseProcess Permits a principal to release
# infrastructure in a process from Fugue management (`fugue release`).
# @constructor AccountJobProcess Permits a principal to obtain
# job information for all processes in the account (`fugue job`).
type AccountAction:
  | AccountRunProcess
  | AccountUpdateProcess
  | AccountKillProcess
  | AccountPropertyProcess @deprecated("Use AccountProcessSetAlias or AccountProcessSetEnforcement instead.")
  | AccountProcessSetAlias
  | AccountProcessSetEnforcement
  | AccountResumeProcess
  | AccountSuspendProcess
  | AccountHistoryProcess
  | AccountStatusProcess
  | AccountReleaseProcess
  | AccountJobProcess

# Actions that can be used to manage the set of IaaS accounts
# registered with the Conductor via `fugue account`
# commands. Applicable to the `AccountTable` subject.
#
# @constructor AccountTableAdd Permits a principal to add an account
# to the account table.
# @constructor AccountTableList Permits a principal to inspect the
# account table.
# @constructor AccountTableUpdate Permits a principal to update
# (modify) an account in the account table.
# @constructor AccountTableDelete Permits a principal to delete an
# account from the account table.
type AccountTableAction:
  | AccountTableAdd
  | AccountTableList
  | AccountTableUpdate
  | AccountTableDelete

# Actions on the RBAC system itself. Applicable to the `RbacMetadata`
# subject.
#
# @constructor RbacListUsers Permits a principal to list users defined
# by the attached RBAC policy.
# @constructor RbacAttachPolicy Permits a principal to attach a policy
# to the Conductor. Note: Fugue run will accept an RBAC policy composition
# or even a mixture of RBAC
# and standard library types but it will have no effect.
# @constructor RbacGetPolicy Permits a principal to download and
# examine the policy attached to the Conductor.
# @constructor RbacDetachPolicy Permits a principal to detach a policy
# from the Conductor.
# @constructor RbacRotateCredential Permits a principal to rotate RBAC
# @constructor RbacPolicyStatus Permits a principal to query RBAC Policy Status
# credentials.
type RbacAction:
  | RbacListUsers
  | RbacAttachPolicy
  | RbacGetPolicy
  | RbacDetachPolicy
  | RbacRotateCredential
  | RbacPolicyStatus

# Actions that can be performed on a `Process` subject, which is the running
# representation of a Composition. Processes are started by invoking the
# Fugue CLI with `fugue run`.
#
# @constructor ProcessUpdate Permits a principal to update a process (`fugue update`).
# @constructor ProcessKill Permits a principal to kill a process (`fugue kill`).
# constructor ProcessGetAlias Permits a principal to get the
# alias property of a process (`fugue property <fid|alias> alias`).
# @constructor ProcessSetAlias Permits a principal to set the alias property of a process (`fugue property <fid|alias> alias --set <value>`).
# constructor ProcessGetEnforcement Permits a principal to get the
# enforcement property of a process (`fugue property <fid|alias> enforcement`).
# @constructor ProcessSetEnforcement Permits a principal to set the
# enforcement property of a process (`fugue property <fid|alias> enforcement --set <value>`).
# @constructor ProcessResume Permits a principal to resume a suspended
# process (`fugue resume`).
# @constructor ProcessSuspend Permits a principal to suspend a running process
# (`fugue suspend`).
# @constructor ProcessGetHistory Permits a principal to obtain history about a
# process (`fugue history`).
# @constructor ProcessGetStatus Permits a principal to obtain status about a
# process (`fugue status`).
# @constructor ProcessRelease Permits a principal to release a process (`fugue release`).
# @constructor ProcessGetJob Permits a principal to obtain information about a
# job for a process (`fugue job`).
type ProcessAction:
  | ProcessUpdate
  | ProcessKill
  | ProcessGetAlias
  | ProcessSetAlias
  | ProcessGetEnforcement
  | ProcessSetEnforcement
  | ProcessResume
  | ProcessSuspend
  | ProcessGetHistory
  | ProcessGetStatus
  | ProcessRelease
  | ProcessGetJob

# Actions that can be used to manage the set of Ludwig validation libraries
# installed on the Conductor via `fugue validation`
# commands. Applicable to the `ValidationTable` subject.
#
# @constructor ValidationTableCreate Permits a principal to add a validation library
# to the Conductor.
# @constructor ValidationTableGet Permits a principal to retrieve a validation
# library from the Conductor.
# @constructor ValidationTableDelete Permits a principal to remove a validation
# library from the Conductor.
# @constructor ValidationTableList Permits a principal to inspect validation
# libraries installed on the Conductor.
type ValidationTableAction:
  | ValidationTableCreate
  | ValidationTableGet
  | ValidationTableDelete
  | ValidationTableList
