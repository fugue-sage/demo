import Fugue.AWS.EC2 as EC2
import Fugue.AWS as AWS
import Fugue.AWS.S3 as S3

# Register the validations
validate validateInstanceType
validate usWestOnly
validate disallowInboundSsh
validate ebsEncrypted
validate requireStandardTagsOnEC2SecurityGroups
validate requireServerSideEncryptionS3BucketPolicy


requiredTags: [
  "Name",
  #"Project",
]

# validate EC2 instance types
fun validateInstanceType(instanceType: EC2.InstanceType) -> Validation:
  case instanceType of
    | EC2.T2_micro  -> Validation.success
    | EC2.T2_small  -> Validation.success
    | EC2.T2_medium -> Validation.success
    | _ -> Validation.failure("Failed Compliance Validation: Must be a valid EC2 instance type. Please see InfoSec.\n")

# validate approved AWS regions
fun usWestOnly(region: AWS.Region) -> Validation:
  case region of
    | AWS.Us-west-1 -> Validation.success
    | AWS.Us-west-2 -> Validation.success
    | _             -> Validation.failure("Invalid Region: Everything must run in Us-west-1 or Us-west-2 only\n")

# validate volumes are encrypted
fun ebsEncrypted(volume: EC2.Volume) -> Validation:
  case volume.(EC2.Volume).encrypted of
    | Optional True  -> Validation.success
    | _              -> Validation.failure("EBS volumes must be encrypted.")

# don't allow SSH in security groups
fun disallowInboundSsh(sg: EC2.SecurityGroup) -> Validation:
  case sg.(EC2.SecurityGroup).ipPermissions of
    | None           -> Validation.success
    | Optional rules -> if List.any(allowsSsh, rules) then Validation.failure("Inbound SSH access (port 22) is not allowed in production.")
                        else Validation.success

# Returns True if the given IpPermission allows SSH (port 22) access.
fun allowsSsh(rule: EC2.IpPermission) -> Bool:
  case rule.(EC2.IpPermission).ipProtocol of
    | "-1"  -> True
    | "udp" -> False
    | "tcp" -> let fromPort: rule.(EC2.IpPermission).fromPort
               let toPort: rule.(EC2.IpPermission).toPort
               (fromPort <= 22) && (toPort >= 22)
    | _     -> False


#TODO add bucket policy inspection for requiring SSL

fun requireServerSideEncryptionS3BucketPolicy(bucket: S3.Bucket) -> Validation:
    let fail: Validation.failure("SSE policy is required on all S3 Buckets")
    case bucket.(S3.Bucket).policy of
      | None            -> fail
      | Optional policy -> let name: bucket.(S3.Bucket).name
                           if isSSE(policy, name) then Validation.success
                           else fail

fun isSSE(policy: String, name: String) -> Bool:
  let kmsPolicy: S3.Bucket.Policy.SSE.kms(name)
  let s3Policy: S3.Bucket.Policy.SSE.s3(name)
  String.equal(policy, kmsPolicy) || String.equal(policy, s3Policy)


  
### TAG FUNCTIONS
fun includesRequiredTags(tags: List<AWS.Tag>) -> Bool:
  let fun includesTag(key: String) -> Bool:
    List.any(fun(t): AWS.Tag.key(t) == key && String.length(AWS.Tag.value(t)) > 0, tags)
  List.all(includesTag, requiredTags)

fun requireStandardTags(tags: List<AWS.Tag>) -> Validation:
  if includesRequiredTags(tags) then Validation.success
  else
    let requiredList: String.join("\n", ["    - " ++ t for t in requiredTags])
    Validation.failure("All taggable resources must have the following tags:\n" ++ requiredList ++ "\n")

fun requireStandardTagsOnEC2SecurityGroups(securityGroup: EC2.SecurityGroup) -> Validation:
  let tags: Optional.unpack([], securityGroup.(EC2.SecurityGroup).tags)
  requireStandardTags(tags)