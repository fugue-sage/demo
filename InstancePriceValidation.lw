# Copyright 2017 Fugue

import Fugue.AWS.EC2 as EC2
import Ludwig.NodeStream as NodeStream
import Ludwig.Template as Template

# this is the autogen lib
import Ec2Prices as Ec2Prices

budgetErrorMessageTemplate: "Estimated EC2 Instance cost of ${{cost}} exceeds the configured budget of ${{budget}}"

fun instanceType(node: NodeStream.Node<EC2.Instance>) -> EC2.InstanceType:
  # An instance will default to m1.small if no instance type is
  # specified.
  node.value.(EC2.Instance).instanceType ?| EC2.M1_small


fun checkInstancePricingLimit {
    hourlyBudget: Float
} -> fun(NodeStream) -> Validation:
    fun(ns):                          
        let allEC2Instances: NodeStream.unsafeGetNodesByTag(ns, "Fugue.Core.AWS.EC2.Instance")
        let prices: [Ec2Prices.instancePrice(instanceType(x)) for x in allEC2Instances]
        let total: List.reduce(Float.add, 0.0, prices)
        if total >. hourlyBudget then
          let msg: Template.render {
            template: budgetErrorMessageTemplate,
            data: {
              cost: total,
              budget: hourlyBudget,
            },
          }
          Validation.failure(msg)
        else
          Validation.success


# Validate the hourly instance budget of a composition by doing something like: 
# validate checkInstancePricingLimit{hourlyBudget: 0.10}
